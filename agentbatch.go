// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

package swarms

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/The-Swarm-Corporation/swarms-client-go/internal/apijson"
	shimjson "github.com/The-Swarm-Corporation/swarms-client-go/internal/encoding/json"
	"github.com/The-Swarm-Corporation/swarms-client-go/internal/requestconfig"
	"github.com/The-Swarm-Corporation/swarms-client-go/option"
	"github.com/The-Swarm-Corporation/swarms-client-go/packages/respjson"
)

// AgentBatchService contains methods and other services that help with interacting
// with the swarms-client API.
//
// Note, unlike clients, this service does not read variables from the environment
// automatically. You should not instantiate this service directly, and instead use
// the [NewAgentBatchService] method instead.
type AgentBatchService struct {
	Options []option.RequestOption
}

// NewAgentBatchService generates a new service that applies the given options to
// each request. These options are applied after the parent client's options (if
// there is one), and before any request-specific options.
func NewAgentBatchService(opts ...option.RequestOption) (r AgentBatchService) {
	r = AgentBatchService{}
	r.Options = opts
	return
}

// Run a batch of agents with the specified tasks using a thread pool.
func (r *AgentBatchService) Run(ctx context.Context, body AgentBatchRunParams, opts ...option.RequestOption) (res *AgentBatchRunResponse, err error) {
	opts = append(r.Options[:], opts...)
	path := "v1/agent/batch/completions"
	err = requestconfig.ExecuteNewRequest(ctx, http.MethodPost, path, body, &res, opts...)
	return
}

type AgentBatchRunResponse struct {
	// The unique identifier for the agent batch completion.
	BatchID string `json:"batch_id,nullable"`
	// The execution time of the agent batch completion.
	ExecutionTime float64 `json:"execution_time,nullable"`
	// The outputs generated by the agent.
	Results any `json:"results"`
	// The timestamp when the agent batch completion was created.
	Timestamp string `json:"timestamp,nullable"`
	// The total number of requests in the batch.
	TotalRequests int64 `json:"total_requests,nullable"`
	// JSON contains metadata for fields, check presence with [respjson.Field.Valid].
	JSON struct {
		BatchID       respjson.Field
		ExecutionTime respjson.Field
		Results       respjson.Field
		Timestamp     respjson.Field
		TotalRequests respjson.Field
		ExtraFields   map[string]respjson.Field
		raw           string
	} `json:"-"`
}

// Returns the unmodified JSON received from the API
func (r AgentBatchRunResponse) RawJSON() string { return r.JSON.raw }
func (r *AgentBatchRunResponse) UnmarshalJSON(data []byte) error {
	return apijson.UnmarshalRoot(data, r)
}

type AgentBatchRunParams struct {
	Body []AgentCompletionParam
	paramObj
}

func (r AgentBatchRunParams) MarshalJSON() (data []byte, err error) {
	return shimjson.Marshal(r.Body)
}
func (r *AgentBatchRunParams) UnmarshalJSON(data []byte) error {
	return json.Unmarshal(data, &r.Body)
}
